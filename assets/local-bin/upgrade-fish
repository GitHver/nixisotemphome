#! /usr/bin/env fish
# set -o pipefail
# no `-e` because we check for fails in the build and use that to revert changes
# no `-u` because there can often be an unsigned variable in the script

# check what to upgrade
# check if new commit in repo
# execute commands
# see if it needs to commit the changes
# other specified results

# The execution order for the update process
function actions {
    cd $1
    # This checks if you have unsaved changes anywhere and aborts if there are any.
    changes=$(git diff)
    if [ "$changes" = "" ]; then
        git fetch
    else
        echo "    you have unsaved changes in your ${2} config"
        return 0
    fi
    # Checks if anything was actually updated. If not, then exit with a success.
    nix flake update
    update=$(git diff)
    if [ "$update" = "" ]; then
        echo "    no updates available for your ${2}"
        return 0
    fi
    # Execute The relevant command
    if [ "$2" = "system" ]; then
        sudo nixos-rebuild switch
    else
        home-manager switch
    fi
    # If the updated build failed, then revert the `flake.lock`.
    # Else commit the changes
    if [ $? -ne 0 ]; then
        git checkout HEAD flake.lock
    else
        git add . &&
        git commit -m 'updated flake.lock' &&
        git push
    fi
}

# Script start. Check the arguments and assign the `level` variable accordingly.
case $1 in
    "system")
        level=1
        ;;
    "user")
        level=3
        ;;
    "all")
        level=2
        ;;
    "")
        echo "no arguments given"
exit 1
        ;;
    *)
        echo "invalid argument"
exit 2

esac

# if you are updating your system you need sudo privileges. This makes sure that
# if you don't have sudo, the script exits.
if [ $level -lt 3 ]
    then
    if [[ "$(id -u)" -eq 0 ]]
        then
        echo "Do not run this command as root, it will call sudo itself"
        exit 3
    else
        if sudo true
            then
            true
        else
            echo "aborting upgrade"
            exit 4
            fi
            fi
            fi

# Save the current directory to return to it later.
owd=$(pwd)

# All values below 3 update the system config.
            if [ $level -lt 3 ]
                then
                actions "/home/${USER}/Nix/nixos-config" system
                fi
                # All values above 1 update the user config.
                if [ $level -gt 1 ]
                    then
                    actions "/home/${USER}/Nix/home-manager" user
                    fi

                    # Return to the original directory.
                    cd $owd

                    if $reboot
                        then
                        reboot
                        fi
